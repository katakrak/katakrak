<?php
/**
 * @file commerce_shipping_weight_tariff.module
 *
 * Allows the creation of complex matrices of shipping tariffs by order weight,
 * across multiple shipping services.
 * Each tariff is stored as a product entity with:
 *  - a weight field for the maximum weight for the tariff
 *  - a shipping service field to indicate the service this belongs to
 *  - the usual Commerce price fields, to give the price of the tariff.
 * These products should not be referenced by nodes, and will not be added to
 * the cart; rather, their price is returned to Commerce Shipping as the
 * shipping service rate.
 *
 * @todo:
 *  - add configuration and UI to edit and create services.
 *  - system to specify the weight field on products. Currently hardcoded!
 */

// Hardcoded settings.
// TODO: clean these up in appropriate ways.

/**
 * The physical weight field on ordinary products.
 */
define('COMMERCE_SHIPPING_WEIGHT_TARIFF_PRODUCT_WEIGHT_FIELD', 'field_p_weight');

/**
 * Implements hook_menu().
 */
function commerce_shipping_weight_tariff_menu() {
  // This is picked up magically by commerce_shipping_ui_overview().
  $items['admin/commerce/config/shipping/methods/weight-tariff-shipping/matrix'] = array(
    'title' => 'View tariff matrix',
    'description' => 'View the overview matrix of shipping weight tariffs.',
    'page callback' => 'commerce_shipping_weight_tariff_admin_matrix',
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_shipping_weight_tariff.admin.inc',
    'weight' => 8,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_shipping_weight_tariff_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/commerce/config/shipping/methods/weight-tariff-shipping/matrix') {
    if (user_access('create commerce_product entities of bundle shipping_tariff')) {
      // Add an action linking to add a new tariff product.
      // Get the return destination first, as that gives us a query array.
      $query = drupal_get_destination();
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t('Add new shipping tariff'),
          'href' => 'admin/commerce/products/add/shipping-tariff',
          'localized_options' => array(
            'query' => $query,
          ),
        ),
      );
    }
  }
}

/**
 * Rate callback for hook_commerce_shipping_service_info().
 *
 * Retrieves all the tariff products that point to the given shipping service,
 * and finds the one whose maximum weight is nearest to the order weight. The
 * price on this tariff product is returned as the shipping service rate.
 *
 * @param $shipping_service
 *  A shipping service definition.
 * @param $order
 *  The current order object.
 */
function commerce_shipping_weight_tariff_service_rate($shipping_service, $order) {
  // Get the weight from the order.
  $order_weight = commerce_shipping_weight_tariff_order_get_weight($order);

  // Get tariff products that satisfy this weight.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', 'shipping_tariff')
    ->fieldCondition('commerce_product_tariff_service', 'value', $shipping_service['name']);
  // We can't use ordering on the query because the weights may be different units.
  // Gah! Why do we have to support the ludicrous imperial system??? We could
  // just save everything as SI and convert on output!
  $result = $query->execute();
  if (empty($result['commerce_product'])) {
    // No rates found for this service.
    return;
  }

  // Load the products so we can look at the weights.
  $products = commerce_product_load_multiple(array_keys($result['commerce_product']));
  //dsm($products);

  // Create an array of max weight => product id, for all the weights that are
  // applicable. We then take the lowest one.
  // (There is potential for clobbering here, but if you define two tariffs
  // with the same max weight, then you have a problem anyway.)
  $product_max_weights = array();
  foreach ($products as $product) {
    $wrapper = entity_metadata_wrapper('commerce_product', $product);
    $weight = $wrapper->commerce_product_tariff_weight->weight->value();
    $unit = $wrapper->commerce_product_tariff_weight->unit->value();

    // Convert to SI.
    // If you're using imperial units, you're stuffed.
    // See http://drupal.org/node/1802242 and help with a patch!
    if ($unit == 'g') {
      $weight /= 1000;
    }

    // Skip a tariff if the order weighs more than the tariff's max weight.
    if ($weight < $order_weight) {
      continue;
    }

    // Build the array of weights => product ids.
    $product_max_weights[$weight] = $product->product_id;
  }

  // If we found no tariffs (because the product is too heavy, perhaps), return nothing.
  if (empty($product_max_weights)) {
    return;
  }

  // Sort the weights array by weight, then take the lowest item.
  ksort($product_max_weights);
  $tariff_product_id = array_shift($product_max_weights);
  // Get our desired tariff product.
  $tariff_product = $products[$tariff_product_id];
  //dsm($tariff_product);

  // Return the price from the tariff product.
  $wrapper = entity_metadata_wrapper('commerce_product', $tariff_product);
  return $wrapper->commerce_price->value();
}

/**
 * Helper function to get an order's total weight.
 *
 * This calculates weight based on the physical_weight field on each product.
 *
 * @param $order
 *  The commerce order object to get a weight for.
 *
 * @return
 *  A weight in kg.
 */
function commerce_shipping_weight_tariff_order_get_weight($order) {
  $order_weight = 0.0;

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Build up an array of line item id => weight in kg.
  $line_item_weights = array();
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // We can't use type == 'product' as a criterion, as this will fail with
    // anything that expands line item types such as Commerce Custom Product.
    // Instead, try the commerce_product property.
    try {
      // Get the product this line item represents.
      $commerce_product_wrapper = $line_item_wrapper->commerce_product;
    }
    catch (EntityMetadataWrapperException $e) {
      // Skip this line item if it has no product.
      continue;
    }

    try {
      $weight = $commerce_product_wrapper->{COMMERCE_SHIPPING_WEIGHT_TARIFF_PRODUCT_WEIGHT_FIELD}->weight->value();
      $unit = $commerce_product_wrapper->{COMMERCE_SHIPPING_WEIGHT_TARIFF_PRODUCT_WEIGHT_FIELD}->unit->value();

      // Convert to SI.
      // @todo: bake this into the physical weight field.
      // @see http://drupal.org/node/1802242
      if ($unit == 'g') {
        $weight /= 1000;
      }

      // The line item weight is the product weight times the quantity.
      $quantity = $line_item_wrapper->quantity->value();
      $line_item_weights[$line_item_wrapper->line_item_id->value()] = $quantity * $weight;
    }
    catch (EntityMetadataWrapperException $e) {
      // Skip this line item if its product has no weight field.
      continue;
    }
  } // foreach line item

  // Tot up the line item weights.
  $order_weight = array_sum($line_item_weights);
  return $order_weight;
}

/**
 * Options list callback for the service method field on tariff products.
 */
function commerce_shipping_weight_tariff_methods_options_list() {
  // Get the services for our method.
  $services = commerce_shipping_services('weight_tariff_shipping');
  $options = array();

  foreach ($services as $service_name => $service_info) {
    $options[$service_name] = $service_info['display_title'];
  }
  return $options;
}
