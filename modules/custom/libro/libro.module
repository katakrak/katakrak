<?php
/**
 * @file
 * Code for the libro feature.
 */

include_once 'libro.features.inc';

/**
 * Implementation of hook_menu().
 */
function libro_menu() {
  $items = array();
  $items['admin/commerce/config/peso'] = array(
    'title' => 'Peso de los productos',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libro_peso_moda_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
  );
   $items['node/%node/portada'] = array(
    'title' => 'Portada',
    'page callback' => 'libro_borrar_portada',
    'page arguments' => array(1),
    'access arguments' => array('access dilve information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['libro'] = array(
    'title' => 'Portada',
    'page callback' => 'libro_por_isbn',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function libro_borrar_portada($node) {
  return drupal_get_form('libro_borrar_portada_form', $node);
}

function libro_borrar_portada_form($node) {
  
}

function libro_block_info() {
  $blocks = array();
  $blocks['katakrak_libro_estilo'] = array(
    'info' => t('Libro de estilo'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['katakrak_secciones'] = array(
    'info' => t('Navegador por secciones'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['libreria_home_search'] = array(
    'info' => t('Bloque busqueda home libros'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function libro_block_view($delta) {
  global $language;
  if ($delta == 'katakrak_libro_estilo') {
    if ($language->language == 'es') {
      $link = l("Consulta el<br>libro de estilo", 'libro-de-estilo', array('html' => 1));
    }
    else {
      $link = l("Ikusi gure<br>estilo liburua", 'estilo-liburua', array('html' => 1));
    }
    $block['content'] = theme('katakrak_libro_estilo', array('link' => $link));
    return $block;
  }
  if ($delta == 'katakrak_secciones') {
    if ($voc = taxonomy_vocabulary_machine_name_load('materias')) {
      $block['subject'] = t('Por secciones');
      $tags = tagclouds_get_tags(array($voc->vid), variable_get('tagclouds_levels', 6), variable_get('tagclouds_block_tags_' . $voc->vid, 12));

      //$tags = tagclouds_sort_tags($tags, "hook_block_view");;
      $tags = tagclouds_sort_tags($tags);

      $block['content'] = theme('tagclouds_weighted', array('terms' => $tags)); //return a chunk of 12 tags
      if ($language->language == 'es') {
        $block['content'] .= views_embed_view('secciones', 'secciones_es');
      }
      else {
        $block['content'] .= views_embed_view('secciones', 'secciones_eu');
      }
    }
    return $block;
  }
  if ($delta == 'libreria_home_search') {
    $seccion = menu_get_object('taxonomy_term', 2);
    $block['content'] = theme('libreria_home_search', array('seccion' => $seccion));
    return $block;
  }
}

function libro_theme() {
  $path = drupal_get_path('module', 'libro');
  return array(
    'katakrak_libro_estilo' => array(
      'template' => 'katakrak-libro-estilo',
      'path' => $path . '/templates',
      'arguments' => array(
        'link' => NULL,
      )
    ),
    'libreria_home_search' => array(
      'template' => 'libreria-home-search',
      'path' => $path . '/templates',
      'arguments' => array(
        'seccion' => NULL,
      )
    ),
  );
}

function libro_peso_moda_form($form, &$form_state) {
  $libro_avg_weight = variable_get('libro_avg_weight', 0);
  drupal_set_message("El promedio del peso de los libros en stock es de $libro_avg_weight gr");
  $form['borrar_pesos_pequeños'] = array(
    '#type' => 'submit',
    '#value' => t('Borrar pesos pequeños'),
  );
  
  $form['asignar_peso'] = array(
    '#type' => 'submit',
    '#value' => t('Asignar peso medio'),
  );
  return $form;
}

function libro_peso_moda_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Borrar pesos pequeños')) {
     $products = db_select('field_data_field_product_peso', 'p')->fields('p')->condition('p.field_product_peso_weight', 100, '<')->execute()->fetchAll();
     foreach ($products as $product_db) {
       $product = commerce_product_load($product_db->entity_id);
       unset($product->field_product_peso['und'][0]);
       commerce_product_save($product);
     }
  }
  if ($form_state['clicked_button']['#value'] == t('Asignar peso medio')) {
    //Lanzar batch que actualice todos los pesos
    $batch = array(
      'title' => t('Actualizando pesos'),
      'operations' => array(
        array('libro_peso_batch_process', array()),
      ),
      'finished' => 'libro_peso_batch_process_finish',
    );
    batch_set($batch);
  }
}

function libro_peso_batch_process(&$context) {
  $products_db = db_select('commerce_product', 'p')->fields('p', array('product_id'));
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $products_db->execute()->rowCount();
  }
  $products = $products_db->range($context['sandbox']['progress'], 100)->execute()->fetchAll();
  
  foreach ($products as $product_id) {
    $libro = commerce_product_load($product_id->product_id);
    
    if (!isset($libro->field_product_peso) || !$libro->field_product_peso['und'][0]['weight']) {
      $libro->field_product_peso['und'][0] = array(
        'weight' => variable_get('libro_avg_weight', 0),
        'unit' => 'g'
      );
      $libro->field_peso_medio['und'][0]['value'] = 1;
    }
    else {
      $libro->field_peso_medio['und'][0]['value'] = 0;
    }
    commerce_product_save($libro);
    $context['sandbox']['progress']++;
  }
  $context['message'] = t("Processed @progress of @max books", array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implementation of hook_cron
 */
function libro_cron() {
  $results = db_query("SELECT COUNT(*) AS total, field_product_peso_weight FROM  {field_data_field_product_peso} p INNER JOIN {field_data_commerce_stock} s  ON s.entity_id = p.entity_id WHERE commerce_stock_value > 0 GROUP BY  field_product_peso_weight ORDER BY total DESC LIMIT 0,10")->fetchAll();
 
  $total = 0;
  $freq = 0;
  foreach ($results as $res) {
    $total += $res->total * $res->field_product_peso_weight;
    $freq += $res->total;
  }
  $avg = $total / $freq;
  
  $avg_round = ceil($avg / 10) * 10;
  variable_set('libro_avg_weight', $avg_round);
}

/**
 * Implementation of hook_node_view
 */
function libro_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'libro' && $view_mode == 'full') {
    $autores = array();
    foreach (element_children($node->content['field_libro_autores']) as $key) {
      $autores[] =  $node->content['field_libro_autores'][$key]['#markup'];
    }
    $node->content['autores'] = join(', ', $autores);
    
    if ($node->field_libro_estado['und'][0]['value'] == 0) {
      $product = commerce_product_load($node->field_libro_producto['und'][0]['product_id']);
      if ($product->commerce_stock['und'][0]['value'] < 1) {
        $node->content['estado'] = t('Disponible bajo pedido');
      }
    }
  }
}

function libro_node_presave($node) {
  if ($node->type == 'libro') {
    foreach ($node->field_libro_categoria['und'] as $cat){
      $parents = taxonomy_get_parents($cat['tid']);
      if ($parents) {
        $parent = array_pop($parents);
        $anadir = TRUE;
        foreach ($node->field_libro_categoria['und'] as $cat){
          if ($cat['tid'] == $parent->tid){
            $anadir = FALSE;
          }
        }
        if ($anadir){
          $node->field_libro_categoria['und'][] = array ('tid' => $parent->tid);
        }
      }
    }
    
  }
}

function libro_node_load($nodes, $types) {
  if (count(array_intersect(array('libro'), $types))) {
    foreach($nodes as $node) {
      $ubicacion = taxonomy_get_parents($node->field_libro_categoria['und'][0]['tid']);
      if ($ubicacion) {
        $ubicacion = array_pop($ubicacion);
        $node->ubicacion = $ubicacion->name;
      }
      foreach ($node->field_libro_autores['und'] as $autores) {
        $term = taxonomy_term_load($autores['tid']);
        $node->autores[] = $term->name;
      }
      $ubicacion = taxonomy_get_parents($node->field_libro_categoria['und'][0]['tid']);
      if ($ubicacion) {
        $ubicacion = array_pop($ubicacion);
        $node->ubicacion = $ubicacion->name;
      }

      $query = db_query("SELECT p.entity_id AS id, n.language as lang
FROM  `field_data_field_parada_libro` l
INNER JOIN field_data_field_itinerario_parada_libros pl ON l.entity_id = pl.field_itinerario_parada_libros_value
INNER JOIN field_data_field_itinerario_paradas p ON pl.entity_id = p.field_itinerario_paradas_value
INNER JOIN node n ON n.nid = p.entity_id
WHERE  `field_parada_libro_nid` = :nid AND n.status = 1", array(':nid' => $node->nid));
      $itinerarios = $query->fetchAll();
      foreach ($itinerarios as $itinerario) {
        $color = array_pop(db_query("Select i.field_itinerario_color_rgb as color FROM field_data_field_itinerario_color i WHERE entity_id = :nid", array(':nid' => $itinerario->id))->fetchAll());
        $linea = array_pop(db_query("Select i.field_itinerario_linea_value as linea FROM field_data_field_itinerario_linea i WHERE entity_id = :nid", array(':nid' => $itinerario->id))->fetchAll());
        $node->itinerarios[$itinerario->lang][$itinerario->id] = array('nid' => $itinerario->id,  'color' => $color->color, 'linea' => $linea->linea);
      }
    }
  }
}

function libro_por_isbn() {
  if ($_GET['isbn']) {
    $result = views_get_view_result('libros_admin', 'libro_por_isbn', $_GET['isbn']);
    if ($result)
      drupal_goto('node/'.$result[0]->nid);
    else 
      drupal_not_found ();
  }
  else {
    drupal_not_found();
  }
  
}

function template_preprocess_libreria_home_search(&$vars) {
  
    $book_count_db = db_query("SELECT COUNT(*) as total FROM  {node} WHERE type = 'libro'");
    foreach ($book_count_db as $count) {
      $vars['total_count'] = number_format($count->total, 0, ',', '.');
    }
    $terms_db = db_query('SELECT * FROM {taxonomy_term_data} WHERE weight > 0 AND vid = 7 ORDER BY weight ASC LIMIT 5');
    foreach ($terms_db as $term) {
      $terms[] = $term;
    }
    $vars['terms'] = i18n_taxonomy_localize_terms($terms);
    $vars['form'] = drupal_get_form('libro_search_home_form', $vars['total_count']);
}

function libro_search_home_form($form, &$form_state, $total, $seccion = NULL) {
  $placeholder = t('@count libros a tu alcance', array('@count' => $total));
  $form['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Nombre'),
    '#title_display' => 'invisible',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => $placeholder
      )
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => '<i class="fa fa-search"></i>',
  );
  return $form; 
}

function libro_search_home_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'buscar/libros/'.$form_state['values']['search_term'];
}