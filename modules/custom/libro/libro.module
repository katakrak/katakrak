<?php
/**
 * @file
 * Code for the libro feature.
 */

include_once 'libro.features.inc';

/**
 * Implementation of hook_menu().
 */
function libro_menu() {
  $items = array();
  $items['admin/commerce/config/peso'] = array(
    'title' => 'Peso de los productos',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libro_peso_moda_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
  );
   $items['admin/commerce/config/book_metainfo'] = array(
    'title' => 'Descargar metadatos de los libros',
    'description' => 'Batch process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libro_metainfo_form'),
    'access arguments' => array('access dilve information'),
  );
   $items['node/%node/portada'] = array(
    'title' => 'Portada',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libro_portada_form', 1),
    'access callback' => 'katakrak_dilve_access_node_info',
    'access arguments' => array('access dilve information', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['libro'] = array(
    'title' => 'Portada',
    'page callback' => 'libro_por_isbn',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function libro_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'libro_node_form') {
    //$form['field_libro_autores']['#access'] = FALSE;
    $form['field_libro_categoria']['#access'] = FALSE;
    $form['field_libro_editorial']['#access'] = FALSE;
  }
}

function libro_portada_form($form, $form_state, $node) {
  $ean = $node->field_libro_ean['und'][0]['value'];
  
  $url = sprintf("http://image.casadellibro.com/a/l/t0/%s/%s.jpg", substr($ean, 11, 2), $ean);

  $form['image'] = array(
    '#markup' => theme('image', array(
      'path' => $url,
      'width' => 120,
      'height' => 200,
      )
    ),
  );
  $form['saludo'] = array(
    '#markup' => '<div>Al mandar este formulario sustituyes la imagen del libro por la que está viendo ahora. </div>'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => "Actualizar libro",
  );
  return $form;
}

function libro_portada_form_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $ean = $node->field_libro_ean['und'][0]['value'];

  $url = sprintf("http://image.casadellibro.com/a/l/t0/%s/%s.jpg", substr($ean, 11, 2), $ean);

  $request = drupal_http_request($url);
  if ($request->code == 200){
    $file = create_cover($request->data, $ean.'.jpg');
    if (!empty($file)) {
      $node->field_libro_portada['und'][0] = $file;
      $node->field_libro_portada['und'][0]['title'] = $node->title;
      $node->field_libro_portada['und'][0]['alt'] = $node->title;
      node_save($node);
    }
  }
  $form_state['redirect'] = 'node/'.$node->nid;
}

function libro_metainfo_form($form, &$form_state) {
   $form['limit'] = array(
    '#title' => t('Libros por iteración'),
    '#description' => t('Catidad de libros a tratar en cada iteración de un batch'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => 1,
  );
  $form['max'] = array(
    '#title' => t('Máximo número de items'),
    '#description' => t('Cantidad de libros a procesar en un batch'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => 1,
  );
  $form['recheck'] = array(
    '#type' => 'checkbox',
    '#title' => t('Recheck'),
    '#description' => t('Volver a procesar los items para los que no se ha encontrado metadatos'),
  );
   $form['enviar'] = array(
    '#type' => 'submit',
    '#value' => t('Enviar'),
  );
  return $form;
}

function libro_metainfo_form_submit($form, &$form_state){
  $limit = $form_state['values']['limit'];
  $max = $form_state['values']['max'];
  $recheck = $form_state['values']['recheck'];
  $batch = array(
    'title' => t('Recuperando portadas'),
    'operations' => array(
      array('libro_metainfo_process', array($limit, $max, $recheck)),
    ),
    'finished' => 'libro_metainfo_finish',
  );
  batch_set($batch);  
}

function libro_metainfo_process($limit, $max, $recheck, &$context) {
  $nodes = db_select('node', 'n');
  $nodes->addJoin('LEFT', 'field_data_field_libro_dilve', 'd', 'n.nid = d.entity_id');
  $or = db_or()->isNull('d.field_libro_dilve_value');
  if ($recheck) {
    $or->condition('d.field_libro_dilve_value', 2);
  }
  else {
    $or->condition('d.field_libro_dilve_value', 0);
  }
  $nodes->fields('n', array('nid'))->fields('d', array('field_libro_dilve_value'))
    ->condition('type', 'libro')->condition($or);
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $max ? $max : $nodes->execute()->rowCount();
    $context['results']['in_dilve'] = 0;
    $context['results']['portadas'] = 0;
  }
  $nids = $nodes->range(0, $limit)->execute()->fetchAll();
  
  $dilve  = new DilveSearch(variable_get('dilve_user', ''), variable_get('dilve_pass', ''));
  $cegal = new CegalSearch(variable_get('cegal_user', ''), variable_get('cegal_clave', ''));
  
  foreach ($nids as $nid) {
    watchdog('libro', $nid->nid);
    $meta = FALSE;
    $tiene_portada = FALSE;
    $node = node_load($nid->nid);
    //Primero comprobamos si el libro está en dilve
    $book = $dilve->search($node->field_libro_ean['und'][0]['value']);
    
    //Si el resultado es string, significa que el libro no está en dilve
    if (is_string($book)) {
      $node->field_libro_dilve['und'][0]['value'] = 2;
      $node->title_field['und'][0]['value'] = $node->title;
    }
    else {
      try {
        $node = libro_crear_ficha($book, TRUE, $node);
      }
      catch (PDOException $e){
        watchdog('libro', $e->getMessage());
      }
      
      $meta = TRUE;
      $context['results']['in_dilve']++;
      if(file_exists($node->field_libro_portada['und'][0]['uri'])){
        $tiene_portada = TRUE;
      }
      $node->field_libro_dilve['und'][0]['value'] = 1;
    }
    //Si no está en dilve o no ha bajado la portado probamos casadellibro
    if (!$tiene_portada) {
      $ean = $node->field_libro_ean['und'][0]['value'];
      $url = sprintf("http://image.casadellibro.com/a/l/t0/%s/%s.jpg", substr($ean, 11, 2), $ean);
      $request = drupal_http_request($url);
      
      if ($request->code == 200) {
        $ext = substr($request->headers['content-type'], strrpos($request->headers['content-type'], '/') + 1);  
        $filename = $node->field_libro_ean['und'][0]['value'].'.'.$ext;
        $file = create_cover($request->data, $filename);
        if (!empty($file)) {
          $node->field_libro_portada['und'][0] = $file;
          $node->field_libro_portada['und'][0]['title'] = $node->title;
          $node->field_libro_portada['und'][0]['alt'] = $node->title;
          $tiene_portada = TRUE;
        }
      }
    }
    //Por último checkeamos en CEGAL
    if (!$tiene_portada) {
      if ($image) {
        $image = $cegal->cover($node->field_libro_isbn['und'][0]['value']);
        $file = create_cover($image['data'], $node->field_libro_isbn['und'][0]['value'].'.'.$image['format']);
        if (!empty($file)) {
          $node->field_libro_portada['und'][0] = $file;
          $node->field_libro_portada['und'][0]['title'] = $node->title;
          $node->field_libro_portada['und'][0]['alt'] = $node->title;
          $tiene_portada = TRUE;
        }
        
      }
    }
    
    if ($tiene_portada)
      $context['results']['portadas']++;
    
    node_save($node);
    $context['sandbox']['progress'] += 1;
  }
  

  $context['message'] = t("Processed @progress of @max books", array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function libro_metainfo_finish($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t("@count book found in dilve", array('@count' => $results['in_dilve'])));
    drupal_set_message(t("@count book covers downloaded", array('@count' => $results['portadas'])));
    
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}


function libro_block_info() {
  $blocks = array();
  $blocks['katakrak_libro_estilo'] = array(
    'info' => t('Libro de estilo'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['katakrak_secciones'] = array(
    'info' => t('Navegador por secciones'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['libreria_home_search'] = array(
    'info' => t('Bloque busqueda home libros'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function libro_block_view($delta) {
  global $language;
  if ($delta == 'katakrak_libro_estilo') {
    if ($language->language == 'es') {
      $link = l("Consulta el<br>libro de estilo", 'libro-de-estilo', array('html' => 1));
    }
    else {
      $link = l("Ikusi gure<br>estilo liburua", 'estilo-liburua', array('html' => 1));
    }
    $block['content'] = theme('katakrak_libro_estilo', array('link' => $link));
    return $block;
  }
  if ($delta == 'katakrak_secciones') {
    if ($voc = taxonomy_vocabulary_machine_name_load('materias')) {
      $block['subject'] = t('Por secciones');
      $tags = tagclouds_get_tags(array($voc->vid), variable_get('tagclouds_levels', 6), variable_get('tagclouds_block_tags_' . $voc->vid, 12));

      //$tags = tagclouds_sort_tags($tags, "hook_block_view");;
      $tags = tagclouds_sort_tags($tags);

      $block['content'] = theme('tagclouds_weighted', array('terms' => $tags)); //return a chunk of 12 tags
      if ($language->language == 'es') {
        $block['content'] .= views_embed_view('secciones', 'secciones_es');
      }
      else {
        $block['content'] .= views_embed_view('secciones', 'secciones_eu');
      }
    }
    return $block;
  }
  if ($delta == 'libreria_home_search') {
    $book_count_db = db_query("SELECT COUNT(*) as total FROM  {node} WHERE type = 'libro'");
    foreach ($book_count_db as $count) {
      $total_count = number_format($count->total, 0, ',', '.');
    }
    $form = drupal_get_form('libro_search_home_form', $total_count);
    $block['content'] = theme('libreria_home_search', array('form' => $form));
    return $block;
  }
}

function libro_theme() {
  $path = drupal_get_path('module', 'libro');
  return array(
    'katakrak_libro_estilo' => array(
      'template' => 'katakrak-libro-estilo',
      'path' => $path . '/templates',
      'arguments' => array(
        'link' => NULL,
      )
    ),
    'libreria_home_search' => array(
      'template' => 'libreria-home-search',
      'path' => $path . '/templates',
      'arguments' => array(
        'form' => NULL,
      )
    ),
  );
}

function libro_peso_moda_form($form, &$form_state) {
  
  $form['valor_peso'] = array(
    '#title' => t("Peso por defecto."),
    '#description' => t('Expresado en gramos'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('libro_avg_weight', 0),

  );
  $form['borrar_pesos_pequeños'] = array(
    '#type' => 'submit',
    '#value' => t('Borrar pesos pequeños'),
  );
  
  $form['asignar_peso'] = array(
    '#type' => 'submit',
    '#value' => t('Asignar peso medio'),
  );
  return $form;
}

function libro_peso_moda_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Borrar pesos pequeños')) {
     $products = db_select('field_data_field_product_peso', 'p')->fields('p')->condition('p.field_product_peso_weight', 100, '<')->execute()->fetchAll();
     foreach ($products as $product_db) {
       $product = commerce_product_load($product_db->entity_id);
       unset($product->field_product_peso['und'][0]);
       commerce_product_save($product);
     }
  }
  if ($form_state['clicked_button']['#value'] == t('Asignar peso medio')) {
    //Lanzar batch que actualice todos los pesos
    variable_set('libro_avg_weight', $form_state['values']['valor_peso']);
    
    $batch = array(
      'title' => t('Actualizando pesos'),
      'operations' => array(
        array('libro_peso_batch_process', array()),
      ),
      'finished' => 'libro_peso_batch_process_finish',
    );
    batch_set($batch);
  }
}

function libro_peso_batch_process(&$context) {
  $products_db = db_select('commerce_product', 'p')->fields('p', array('product_id'));
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['results']['asignados'] = 0;
    $context['sandbox']['max'] = $products_db->execute()->rowCount();
  }
  $products = $products_db->range($context['sandbox']['progress'], 100)->execute()->fetchAll();
  
  foreach ($products as $product_id) {
    $libro = commerce_product_load($product_id->product_id);
    if (!isset($libro->field_product_peso) || $libro->field_product_peso['und'][0]['weight'] < variable_get('libro_avg_weight', 0)) {
      $libro->field_product_peso['und'][0] = array(
        'weight' => variable_get('libro_avg_weight', 0),
        'unit' => 'g'
      );
      $context['results']['asignados'] ++;
      $libro->field_peso_medio['und'][0]['value'] = 1;
    }
    commerce_product_save($libro);
    $context['sandbox']['progress']++;
  }
  $context['message'] = t("Processed @progress of @max books", array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function libro_peso_batch_process_finish($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t("@count libros han sido asignados un peso medio", array('@count' => $results['asignados'])));
    
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

/**
 * Implementation of hook_cron
 */
/*function libro_cron() {
  $results = db_query("SELECT COUNT(*) AS total, field_product_peso_weight FROM  {field_data_field_product_peso} p INNER JOIN {field_data_commerce_stock} s  ON s.entity_id = p.entity_id WHERE commerce_stock_value > 0 GROUP BY  field_product_peso_weight ORDER BY total DESC LIMIT 0,10")->fetchAll();
 
  $total = 0;
  $freq = 0;
  foreach ($results as $res) {
    $total += $res->total * $res->field_product_peso_weight;
    $freq += $res->total;
  }
  $avg = $total / $freq;
  
  $avg_round = ceil($avg / 10) * 10;
  variable_set('libro_avg_weight', $avg_round);
}*/

/**
 * Implementation of hook_node_view
 */
function libro_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'libro' && $view_mode == 'full') {
    $autores = array();
    foreach (element_children($node->content['field_libro_autores']) as $key) {
      $autores[] =  $node->content['field_libro_autores'][$key]['#markup'];
    }
    $node->content['autores'] = join(', ', $autores);
    
    $product = commerce_product_load($node->field_libro_producto['und'][0]['product_id']);
    
    if ($product->commerce_stock['und'][0]['value'] > 0) {
      $node->content['mostrar_carrito'] = TRUE;
    }
    elseif ($node->fiel_libro_estado['und'][0]['value'] == 0) {
      $cegal = new CegalSearch(variable_get('cegal_user', ''), variable_get('cegal_clave', ''));
      $distribuidores = variable_get('distribuidores_confianza', array());
      $disponibilidad = $cegal->disponibilidad($node->field_libro_isbn['und'][0]['value']);
      
      foreach($disponibilidad as $distribuidor) {
        if (array_key_exists($distribuidor, $distribuidores))  {
          $node->content['mostrar_carrito'] = TRUE;
          $node->content['disponible_bajo_pedido'] = TRUE;
          $node->content['plazo'] = $distribuidores[$distribuidor]['plazo'];
        }
      }
      
    }
  }
}

/**
 * 
 * @param type $node
 */
function libro_node_presave($node) {
  if ($node->type == 'libro') {
    foreach ($node->field_libro_categoria['und'] as $cat){
      $parents = taxonomy_get_parents($cat['tid']);
      if ($parents) {
        $parent = array_pop($parents);
        $anadir = TRUE;
        foreach ($node->field_libro_categoria['und'] as $cat){
          if ($cat['tid'] == $parent->tid){
            $anadir = FALSE;
          }
        }
        if ($anadir){
          $node->field_libro_categoria['und'][] = array ('tid' => $parent->tid);
        }
      }
    }
  }
}

/**
 * 
 * @param type $nodes
 * @param type $types
 */
function libro_node_load($nodes, $types) {
  if (count(array_intersect(array('libro'), $types))) {
    foreach($nodes as $node) {
      $ubicacion = taxonomy_get_parents($node->field_libro_categoria['und'][0]['tid']);
      if ($ubicacion) {
        $ubicacion = array_pop($ubicacion);
        $node->ubicacion = $ubicacion->name;
      }
      foreach ($node->field_libro_autores['und'] as $autores) {
        $term = taxonomy_term_load($autores['tid']);
        $node->autores[] = $term->name;
      }
      if (isset($node->field_libro_categoria['und'])) {
        $ubicacion = taxonomy_get_parents($node->field_libro_categoria['und'][0]['tid']);
        if ($ubicacion) {
          $ubicacion = array_pop($ubicacion);
          $node->ubicacion = $ubicacion->name;
        }
      }

      $query = db_query("SELECT p.entity_id AS id, n.language as lang
FROM  `field_data_field_parada_libro` l
INNER JOIN field_data_field_itinerario_parada_libros pl ON l.entity_id = pl.field_itinerario_parada_libros_value
INNER JOIN field_data_field_itinerario_paradas p ON pl.entity_id = p.field_itinerario_paradas_value
INNER JOIN node n ON n.nid = p.entity_id
WHERE  `field_parada_libro_nid` = :nid AND n.status = 1", array(':nid' => $node->nid));
      $itinerarios = $query->fetchAll();
      foreach ($itinerarios as $itinerario) {
        $color_db = db_query("Select i.field_itinerario_color_rgb as color FROM field_data_field_itinerario_color i WHERE entity_id = :nid", array(':nid' => $itinerario->id))->fetchAll();
        $color = array_pop($color_db);
        $linea_db = db_query("Select i.field_itinerario_linea_value as linea FROM field_data_field_itinerario_linea i WHERE entity_id = :nid", array(':nid' => $itinerario->id))->fetchAll();
        $linea = array_pop($linea_db);
        $node->itinerarios[$itinerario->lang][$itinerario->id] = array('nid' => $itinerario->id,  'color' => $color->color, 'linea' => $linea->linea);
      }
    }
  }
}


function _get_book_by_ean($ean) {
  $result = views_get_view_result('libros_admin', 'libro_por_ean', $ean);
  return node_load($result[0]->nid);
}
/**
 * 
 */
function libro_por_isbn() {
  if ($_GET['isbn']) {
    $options = array('query' => array(
      'utm_source'=>'todostuslibros',
      'utm_medium'=>'todostuslibros',
      ));
    $isbn = $_GET['isbn'];
    $result = views_get_view_result('libros_admin', 'libro_por_isbn', $isbn);
    
    if ($result)
      drupal_goto('node/'.$result[0]->nid, $options);
    else {//Primero intentamos cargar la info de dilve
      $dilve = new DilveSearch(variable_get('dilve_user', ''), variable_get('dilve_pass', ''));
      $book = $dilve->search($_GET['isbn']);
      
      if (!is_string($book))//Si está en dilve creamos la ficha
        $node = libro_crear_ficha($book);
      else { //Si no intentamos sacar la info de cegal
        $cegal = new CegalSearch(variable_get('cegal_user', ''), variable_get('cegal_clave', ''));
        $book = $cegal->ficha($isbn);
        if ($book) 
          $node = libro_crear_ficha($book);
      }
      if ($node)
        drupal_goto('node/'.$node->nid, $options);
    }   
  }
  else {
    drupal_not_found();
  }
}


function libro_search_home_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'buscar/libros/'.$form_state['values']['search_term'];
}

/**
 * Checks if the cover exists and if it does returns the file object. 
 * It it doesn't exists downloads it and creates the object
 * 
 * @param type $url
 * @param type $isbn
 * @return type
 */
function create_cover($data, $filename, $mimetype = 'image/jpeg', $force = FALSE) {
  global $user;
  //Primero intentamos cargar la imagen de la base de datos
  $fid = db_select('file_managed', 'f')->condition('filename', $filename)->fields('f', array('fid'))
    ->execute()->fetchAll();
  $filepath = sprintf("%s/%s/portadas/%s",DRUPAL_ROOT, variable_get('file_public_path', 'sites/default/files'), $filename);
  //Si existe comprobamos que efectivamente el archivo está. Si no lo creamos
  if ($fid) {
    $file = file_load($fid[0]->fid);
    
    if ((!file_exists($filepath) || $force)) {
   
      file_put_contents($filepath, $data);
    }
  }
  //Si no existe esa imagen generamos la imagen en el directorio y el objeto en la base de datos
  else {
    $filepath = sprintf("%s/%s/portadas/%s",DRUPAL_ROOT, variable_get('file_public_path', 'sites/default/files'), $filename);
    file_put_contents($filepath, $data);
    $file = new stdClass();
    $file->uri = "public://portadas/".$filename;
    $image = image_load($file->uri);

//      $width = variable_get('dilve_max_image_width', 500);
//      if ($image->info['width'] > $width) {
//        if (image_scale($image, $width)) {
//          image_save($image);
//        }
//      }

    $file->uid = $user->uid;
    $file->filename = $filename;
    $file->filemime = $image->info['mime_type'];
    $file->filesize = $image->info['file_size']; 
    $file->status = 1;
    $file->timestamp = REQUEST_TIME;
    file_save($file);

    }
  return (array)$file;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @param type $total
 * @return 
 */
function libro_search_home_form($form, &$form_state, $total = NULL) {
  $placeholder = t('@count libros a tu alcance', array('@count' => $total));
  $form['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Nombre'),
    '#title_display' => 'invisible',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => $placeholder
      )
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => '<i class="fa fa-3x fa-search"></i>',
  );
  return $form; 
}

function libro_generar_boton_compra($nid) {
  $node = node_load($nid);
  $product = commerce_product_load($node->field_libro_producto['und'][0]['product_id']);
  
  
  $default_quantity = 1;
  $product_ids = array($product->product_id);

  // Build the line item we'll pass to the Add to form.
  $line_item = commerce_product_line_item_new($product, $default_quantity, 0, array(), 0);
  $line_item->data['context']['product_ids'] = $product_ids;
  $line_item->data['context']['add_to_cart_combine'] = 1;

  // Generate a form ID for this add to cart form.
  $form_id = commerce_cart_add_to_cart_form_id($product_ids);
  $line_item->data['context']['display_path'] = current_path();

   $mostrar_carrito = FALSE;
  if ($product->commerce_stock['und'][0]['value'] > 0) {
    $mostrar_carrito = TRUE;
  }
  elseif ($node->field_libro_estado['und'][0]['value'] == 0) {
    $cegal = new CegalSearch(variable_get('cegal_user', ''), variable_get('cegal_clave', ''));
    $distribuidores = variable_get('distribuidores_confianza', array());
    $disponibilidad = $cegal->disponibilidad($node->field_libro_isbn['und'][0]['value']);

    foreach($disponibilidad as $distribuidor) {
      if (array_key_exists($distribuidor, $distribuidores))  {
        $mostrar_carrito = TRUE;
        $plazo = $distribuidores[$distribuidor]['plazo'];
        
      }
    }
  }
  // Build the Add to Cart form using the prepared values.
  $form = drupal_get_form($form_id, $line_item, 0, array());
  
  if ($mostrar_carrito){
    $message = '<div>'.distribuidores_plazo($plazo).'</div>';
    return drupal_render($form).$message;
  }
  else 
    return '';
}

/**
 * A partir de un array con información de un isbn crea un libro y su 
 * producto de commerce asociado
 * @param type $book
 * @param $update Si hay que actualizar un nodo exitente o no
 * @param $node Solo si la anterior es true
 * @return $node
 */
function libro_crear_ficha($book, $update = FALSE, $node = NULL) {
  //Si metemos la opción update cargamos la info de la base de datos
  if ($update) {
    $commerce_product = commerce_product_load($node->field_libro_producto['und'][0]['product_id']);
  }
  //Si no declaramos el nodo y el producto
  else {
    $node = new stdClass();
    $node->type = 'libro';
    $node->uid = 1;

    $commerce_product = commerce_product_load_by_sku($book['isbn']);
    if (!$commerce_product)
      $commerce_product = new stdClass();

    $commerce_product->type = 'libro';
    $commerce_product->sku = $book['ean'];
  }
  
  $title = truncate_utf8($book['title'],128, TRUE, TRUE);
  if ($book['title']) {
    $commerce_product->title = $title;
    $node->title = $title;
    $node->title_field['und'][0]['value'] = $title;
  }
  
  $node->field_libro_isbn['und'][0]['value'] = $book['isbn'];
  
  $node->field_libro_ean['und'][0]['value'] = $book['ean'];


  if (isset($book['pages'])) {
   $node->field_libro_paginas['und'][0]['value'] = $book['pages'];
  }

  if (isset($book['year'])) {
    $year_number = $book['year'];
    $year_terms = taxonomy_get_term_by_name($year_number, 'urtea');
    if ($year_terms) {
      $year = array_pop($year_terms);
    }
    else {
      $year = new stdClass();
      foreach (taxonomy_get_vocabularies() as $vid => $vocab){
        if ($vocab->name == 'Año') {
          $year->vid = $vid ;
        }
      }
      $year->name = $year_number;
      taxonomy_term_save($year);
    }
    $node->field_libro_year['und'][0]['tid'] = $year->tid;
  }

  if (isset($book['description'])) {
    $node->field_libro_sinopsis['und'][0]['value'] = $book['description'];                
    $node->field_libro_sinopsis['und'][0]['format'] = 'sinopsis';
  }
  
  if (isset($book["subtitle"])) {
    $node->field_libro_subtitulo['und'][0]['value'] = $book['subtitle'];
  }


  if ($book['price']) {
    $commerce_product->commerce_price['und'][0] = array(
      'amount' => $book['price'],
      'currency_code' => 'EUR',
      'data' => array(
        'include_tax' =>  'iva_libros'
      ),
    );
  }
  if (isset($book['weight'])) {
    $commerce_product->field_product_peso['und'][0] = array(
      'weight' => $book['weight']['value'],
      'unit' => 'g',
    );
  }



  if ($book['cover_url']) {
    $request = drupal_http_request($book['cover_url']);
    if ($request->code == 200) {
      $ext = substr($request->headers['content-type'], strrpos($request->headers['content-type'], '/') + 1); 
      $filename = $node->field_libro_ean['und'][0]['value'].'.'.$ext;
      $file = create_cover($request->data, $filename);
    }
  }
  
  if (isset($book['portada'])) {
    $filename = $book['ean'].'.'.$book['portada']['format'];
    $file = create_cover($book['portada']['data'], $filename);
  }
  
  if (!empty($file)) {
    $node->field_libro_portada['und'][0] = $file;
    $node->field_libro_portada['und'][0]['title'] = $node->title;
    $node->field_libro_portada['und'][0]['alt'] = $node->title;
  }
  
  commerce_product_save($commerce_product);
  
  $node->field_libro_producto['und'][0]['product_id'] = $commerce_product->product_id;
  node_save($node);
  return $node;
}