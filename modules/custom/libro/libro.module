<?php
/**
 * @file
 * Code for the libro feature.
 */

include_once 'libro.features.inc';


/**
 * Implementation of hook_menu().
 */
function libro_menu() {
  $items = array();
  $items['admin/commerce/config/peso'] = array(
    'title' => 'Peso de los productos',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libro_peso_moda_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function libro_peso_moda_form($form, &$form_state) {
  $libro_avg_weight = variable_get('libro_avg_weight', 0);
  drupal_set_message("El promedio del peso de los libros en stock es de $libro_avg_weight gr");
  $form['borrar_pesos_pequeños'] = array(
    '#type' => 'submit',
    '#value' => t('Borrar pesos pequeños'),
  );
  
  $form['asignar_peso'] = array(
    '#type' => 'submit',
    '#value' => t('Asignar peso medio'),
  );
  return $form;
}

function libro_peso_moda_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Borrar pesos pequeños')) {
     $products = db_select('field_data_field_product_peso', 'p')->fields('p')->condition('p.field_product_peso_weight', 100, '<')->execute()->fetchAll();
     foreach ($products as $product_db) {
       $product = commerce_product_load($product_db->entity_id);
       unset($product->field_product_peso['und'][0]);
       commerce_product_save($product);
     }
  }
  if ($form_state['clicked_button']['#value'] == t('Asignar peso medio')) {
    //Lanzar batch que actualice todos los pesos
    $batch = array(
      'title' => t('Actualizando pesos'),
      'operations' => array(
        array('libro_peso_batch_process', array()),
      ),
      'finished' => 'libro_peso_batch_process_finish',
    );
    batch_set($batch);
  }
}

function libro_peso_batch_process(&$context) {
  $products_db = db_select('commerce_product', 'p')->fields('p', array('product_id'));
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $products_db->execute()->rowCount();
  }
  $products = $products_db->range($context['sandbox']['progress'], 100)->execute()->fetchAll();
  
  foreach ($products as $product_id) {
    $libro = commerce_product_load($product_id->product_id);
    
    if (!isset($libro->field_product_peso) || !$libro->field_product_peso['und'][0]['weight']) {
      $libro->field_product_peso['und'][0] = array(
        'weight' => variable_get('libro_avg_weight', 0),
        'unit' => 'g'
      );
      $libro->field_peso_medio['und'][0]['value'] = 1;
    }
    else {
      $libro->field_peso_medio['und'][0]['value'] = 0;
    }
    commerce_product_save($libro);
    $context['sandbox']['progress']++;
  }
  $context['message'] = t("Processed @progress of @max books", array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implementation of hook_cron
 */
function libro_cron() {
  $results = db_query("SELECT COUNT(*) AS total, field_product_peso_weight FROM  {field_data_field_product_peso} p INNER JOIN {field_data_commerce_stock} s  ON s.entity_id = p.entity_id WHERE commerce_stock_value > 0 GROUP BY  field_product_peso_weight ORDER BY total DESC LIMIT 0,10")->fetchAll();
 
  $total = 0;
  $freq = 0;
  foreach ($results as $res) {
    $total += $res->total * $res->field_product_peso_weight;
    $freq += $res->total;
  }
  $avg = $total / $freq;
  
  $avg_round = ceil($avg / 10) * 10;
  variable_set('libro_avg_weight', $avg_round);
}

/**
 * Implementation of hook_node_view
 */
function libro_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'libro' && $view_mode == 'full') {
    $autores = array();
    foreach (element_children($node->content['field_libro_autores']) as $key) {
      $autores[] =  $node->content['field_libro_autores'][$key]['#markup'];
    }
    $node->content['autores'] = join(', ', $autores);
    
    if ($node->field_libro_estado['und'][0]['value'] == 0) {
      $product = commerce_product_load($node->field_libro_producto['und'][0]['product_id']);
      if ($product->commerce_stock['und'][0]['value'] < 1) {
        $node->content['estado'] = t('Disponible bajo pedido');
      }
    }
  }
}