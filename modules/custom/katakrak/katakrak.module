<?php
/**
 * @file
 * Code for the Katakrak feature.
 */

include_once 'katakrak.features.inc';

function katakrak_admin_paths() {
  $paths = array(
    'node/*/edit' => TRUE,
    'node/*/translate' => TRUE,
    'node/*/devel' => TRUE,
    'node/*/dilve' => TRUE,
    'node/add/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_block_info().
 */
function katakrak_block_info() {
  include_once DRUPAL_ROOT . '/includes/language.inc';
  $blocks = array();
  $blocks['language_switcher'] = array(
    'info' => t('Language switcher small'),
    // Not worth caching.
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['newsletter_suscribe'] = array(
    'info' => t('Katakrak suscribe block'),
    // Not worth caching.
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function katakrak_block_view($delta) {
  if ($delta == 'language_switcher' && drupal_multilingual()) {
    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
    $links = language_negotiation_get_switch_links('language', $path);
    if (isset($links->links)) {
      drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');
      
      foreach ($links->links as $id => &$link) {
        $link['title'] = $id;
      }
      $class = "language-switcher-{$links->provider}";
      $variables = array('links' => $links->links, 'attributes' => array('class' => array($class)));
      $block['content'] = theme('links__locale_block', $variables);
      return $block;
    }
  }
  if ($delta == 'newsletter_suscribe') {
    $block['content'] = drupal_get_form('katakrak_newsletter_suscribe_form');
    return $block;
  }
}

function katakrak_newsletter_suscribe_form($form, &$form_state) {
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implementation of hook_menu().
 */
function katakrak_menu() {
  $items = array();
  $items['admin/config/portadas'] = array(
    'title' => 'Portadas',
    'description' => 'Dilve options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('katakrak_portadas_batch_process_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Creates the batch
 * 
 * @param type $form
 * @param type $form_state
 * @return type
 */
function katakrak_portadas_batch_process_form($form, &$form_state) {
  $form['width'] = array(
    '#title' => t('Width of images in px'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => 500,
  );
  $form['limit'] = array(
    '#title' => t('Limit'),
    '#description' => t('If no value all items will be processed'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => 100,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Procesar'),
  );
  return $form;
}

function katakrak_portadas_batch_process_form_submit($form, &$form_state) {
  $limit = $form_state['values']['limit'];
  $width = $form_state['values']['width'];
  $batch = array(
    'title' => t('Redimensionando portadas'),
    'operations' => array(
      array('katakrak_portadas_batch_process', array($limit, $width)),
    ),
    'finished' => 'katakrak_portadas_batch_process_finish',
  );
  batch_set($batch);
}

/**
 * Batch function to process all the items
 * 
 * @param type $context
 */
function katakrak_portadas_batch_process($limit, $width, &$context){
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['files'] = db_select('file_managed', 'f')->fields('f', array('fid'))
          ->condition('uri', "%portadas%", 'LIKE')->orderBy('filesize', 'DESC')->execute()->fetchAll();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($context['sandbox']['files']);
    $context['results']['portadas'] = 0;
    $context['results']['size_before'] = 0;
    $context['results']['size_after'] = 0;
  }
  
  $limit = $limit ? $limit : 100;
  $i = 0;
  
  while ($i < $limit) {
    $fid = array_shift($context['sandbox']['files']);
    $file = file_load($fid->fid);
    $image = image_load($file->uri);
    $context['results']['size_before'] += $image->info['file_size'];
    if ($image->info['width'] > $width) {
      if (image_scale($image, $width)) {
        $context['results']['portadas']++;
        image_save($image);
        $context['results']['size_after'] += $image->info['file_size'];
      }
    }
    $i++;
    $context['sandbox']['progress']++;
  }
  
  
  
  $context['message'] = t("Processed @progress of @max portadas", array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}


function katakrak_portadas_batch_process_finish($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t("@count portadas procesadas", array('@count' => $results['portadas'])));
    drupal_set_message(t("@count in size before processing", array('@count' => format_size($results['size_before']))));
    drupal_set_message(t("@count in size after processing", array('@count' => format_size($results['size_after']))));
    $saved = $results['size_before'] - $results['size_after'];
    drupal_set_message(t("@count saved in the operation", array('@count' => format_size($saved))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

function katakrak_init() {
}